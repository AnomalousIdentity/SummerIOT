#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <ESP8266WiFi.h>
#include <WiFiUDP.h>
#include "NTPClientUpdated.h"
#include <OpenWeatherMapCurrent.h>
#include <OpenWeatherMapForecast.h>
#include "weather_icon.h"

#define MAX_FORECASTS 3

#define TFT_CS 16
#define TFT_RST 0
#define TFT_DC 4

#define WIFI_SSID "NETGEAR46"
#define WIFI_PASS "redcanoe233"

WiFiUDP ntpUDP;
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
const long utcOffSetInSeconds = -7 * 3600;
NTPClientUpdated timeClient(ntpUDP, utcOffSetInSeconds);
String dateStamp, timeStamp, date, timee, weades, sunr, suns, weatherDesStamp, sunriseStamp, sunsetStamp, foredes, foredesStamp;
double tempStamp, temp, forecast1, forecastStamp;

String OPEN_WEATHER_MAP_LANGUAGE ="en";
String OPEN_WEATHER_MAP_APP_ID="b8f79e15dc3c8d3401506a85f8afd7f7";
String OPEN_WEATHER_MAP_LOCATION="Bellevue,WA,US";
const boolean IS_METRIC = true;

OpenWeatherMapCurrentData currentWeather;
OpenWeatherMapForecastData forecastWeather[MAX_FORECASTS];

void drawProgress(int percentage){
  if (percentage == 0) {
    tft.fillRect(6,52,116,10,ST77XX_BLACK);
  }
  tft.drawRect(4,50,120,14,ST77XX_WHITE);
  tft.fillRect(6,52,116*percentage/100,10,ST77XX_WHITE);
}
void connectWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  tft.setCursor(10,30);
  tft.setTextSize(1);
  tft.setTextColor(ST77XX_WHITE);
  tft.print("Welcome to IoT");
  tft.setCursor(10,105);
  tft.setTextSize(1);
  tft.setTextColor(ST77XX_WHITE);
  tft.print("Johnathan Zhang");
  tft.setCursor(10,80);
  tft.setTextSize(1);
  tft.setTextColor(ST77XX_WHITE, ST77XX_BLACK);
  Serial.print("Connecting to " + String(WIFI_SSID));
  int i = 0;
  while(WiFi.status() != WL_CONNECTED) {
    drawProgress(i);
    i+=20;
    if(i>99){
      i=0;
    }
    delay(500);
  }
  drawProgress(100);
  tft.setCursor(10,80);
  tft.setTextSize(1);
  tft.setTextColor(ST77XX_WHITE,ST77XX_BLACK);
  tft.println("\nConnected to " + String(WIFI_SSID));
}
void updateWeatherPic(){
  tft.drawRGBBitmap(50, 80, getSmallIcon(currentWeather.icon), ICON_WIDTH, ICON_HEIGHT);
}
void updateWeather(){
  OpenWeatherMapCurrent currentWeatherClient;
  currentWeatherClient.setMetric(IS_METRIC);
  currentWeatherClient.setLanguage(OPEN_WEATHER_MAP_LANGUAGE);
  currentWeatherClient.updateCurrent(&currentWeather,OPEN_WEATHER_MAP_APP_ID, OPEN_WEATHER_MAP_LOCATION);
  
  OpenWeatherMapForecast forecastWeatherClient;
  forecastWeatherClient.setMetric(IS_METRIC);
  forecastWeatherClient.setLanguage(OPEN_WEATHER_MAP_LANGUAGE);
}
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  tft.initR(INITR_144GREENTAB);
  tft.setTextWrap(true);
  tft.setTextSize(1);
  tft.fillScreen(0x4E5F);
  tft.setTextColor(ST77XX_WHITE, 0x4E5F);
  tft.setCursor(0,0);
  connectWiFi();
  timeClient.begin();
}

void loop() {
  // put your main code here, to run repeatedly:
  tft.setTextColor(ST77XX_WHITE, 0x4E5F);
  timeClient.update();
  updateWeather();
  dateStamp = timeClient.getFormattedDate();
  timeStamp = timeClient.getFormattedTime();
  tempStamp = currentWeather.temp;
  weatherDesStamp = currentWeather.description;
  sunriseStamp = timeClient.getFormattedTime(true, currentWeather.sunrise + utcOffSetInSeconds);
  sunsetStamp = timeClient.getFormattedTime(true, currentWeather.sunset + utcOffSetInSeconds);
  forecastStamp = forecastWeather[0].temp;
  foredesStamp = forecastWeather[0].description;
  
  if (date!=dateStamp || timee!=timeStamp || temp!=tempStamp || sunr != sunriseStamp || suns != sunsetStamp || forecast1 != forecastStamp || foredes != foredesStamp){
    tft.fillScreen(0x4E5F);
    tft.setCursor(40,20);
    tft.setTextSize(2);
    tft.println(timeStamp);
    tft.setCursor(5,20);
    tft.setTextSize(1);
    tft.println(dateStamp);
    tft.setCursor(35,110);
    tft.println(String(int(round(tempStamp))) + " Celsius");
    tft.setCursor(30,60);
    tft.println("Description: \n" + weatherDesStamp);
//    tft.println("Sunrise: " + sunriseStamp);
//    tft.println("Sunset: " + sunsetStamp);
//    tft.println("");
//    tft.println("In 3hrs");
//    tft.println("Temp: " + String(int(round(forecastStamp))) + "Celsius");
//    tft.println("Description: " + foredesStamp);
    
  }
  delay(1000);
}
